/* * J A V A  C O M M U N I T Y  P R O C E S S * * J S R  9 4 * * Test Compatibility Kit * */package org.jcp.jsr94.tck.admin;import org.junit.jupiter.api.Test;import javax.rules.admin.RuleAdministrationException;/** * Test the javax.rules.admin.RuleAdministrationException class. * * @version 1.0 * @see javax.rules.admin.RuleAdministrationException * @since JSR-94 1.0 */class RuleAdministrationExceptionTest {    /**     * Test the compliance for javax.rules.admin.RuleAdministrationException.     *     * <b>Description:</b><br>     * Create two instances of the RuleAdministrationException class. The first     * instance will be constructed with an additional message. The     * second instance will have its own message as well as wrap the     * first instance. The class hierarchy will be tested. The second     * exception will be thrown. The exception will be caught and the     * test will verify whether the exception can successfully be     * unwrapped.     * The following tests will be performed.     * <p>     * Instance Creation     *     * <li>Fail: If RuleAdministrationException cannot be created by any of     * the JSR specified constructor.     * </li>     * <li>Succeed: If the exception can successfully be created.     *     * </ul>     *     * <li>Class Hierarchy     *     * <ul>     *     * <li>Fail: If superclass is not a RuleException     *     * <li>Succeed: If the exception is instance of RuleException.     *     * </ul>     *     * <li>Exception Wrapping     *     * <ul>     *     * <li>Fail: If any other than the the original     * <p>     * RuleAdministrationException is unwrapped.     *     * <li>Succeed: If exception can successfully be unwrapped.     *     * </ul>     *     * </ul>     */    @Test    void testRuleAdministrationException() {        RuleAdministrationException re1 = null;        RuleAdministrationException re2 = null;        try {            re1 = new RuleAdministrationException("jsr94-test-rule-administration-exception");            re2 = new RuleAdministrationException("jsr94-test-embedded-rule-administration-exception", re1);            // A RuleAdministrationException must be a subclass of a RuleException            throw re2;        } catch (RuleAdministrationException ex) {            // Catch it.            Throwable t = ex.getCause();            // The cause of the exception should be re1.            assert t.equals(re1);            // The thrown exception should be re2.            assert ex.equals(re2);        } catch (Exception e) {            throw new IllegalStateException();        }    }}